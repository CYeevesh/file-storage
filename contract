// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DecentralizedFileStorage {
    // Struct to store file information with permissions mapping
    struct File {
        string hash;          // IPFS hash of the file (acts as a unique identifier)
        address owner;        // Address of the file owner
        string encryptedKey;  // Encrypted symmetric key for file access
        mapping(address => bool) permissions; // Mapping of addresses to boolean indicating if they have access
        address[] permissionedAddresses; // Array of addresses with permissions
    }

    // Struct to return simplified file information without permissions mapping
    struct FileInfo {
        string hash;          // IPFS hash of the file
        address owner;        // Address of the file owner
        string encryptedKey;  // Encrypted symmetric key for file access
    }

    // Struct to store shared file information along with user's address
    struct SharedFileInfo {
        string hash;
        address owner;
        string encryptedKey;
        address sharedWith;
    }

    // Mapping of user address to their list of uploaded files
    mapping(address => File[]) public userFiles;

    // Array to keep track of all users
    address[] private allUsers;

    // Event emitted when a new file is uploaded
    event FileUploaded(address indexed owner, string hash, string encryptedKey);

    // Event emitted when permission is granted to another user
    event PermissionGranted(address indexed owner, string hash, address indexed user);

    // Event emitted when permission is revoked from a user
    event PermissionRevoked(address indexed owner, string hash, address indexed user);

    /**
     * @dev Upload a new file to the storage
     * @param _hash The IPFS hash of the file
     * @param _encryptedKey The encrypted key for the file
     */
    function uploadFile(string memory _hash, string memory _encryptedKey) public {
        // Add a new file to the user's list of files
        File storage newFile = userFiles[msg.sender].push();
        newFile.hash = _hash;
        newFile.owner = msg.sender;
        newFile.encryptedKey = _encryptedKey;

        // Add the user to the allUsers array if it's their first file upload
        if (userFiles[msg.sender].length == 1) {
            allUsers.push(msg.sender);
        }

        emit FileUploaded(msg.sender, _hash, _encryptedKey); // Emit the FileUploaded event
    }

    /**
     * @dev Grant permission to another user to view a specific file
     * @param fileIndex The index of the file in the user's list of files
     * @param user The address of the user to grant permission to
     */
    function grantPermission(uint fileIndex, address user) public {
        // Ensure the file index is valid
        require(fileIndex < userFiles[msg.sender].length, "Invalid file index");
        
        // Get the file from the user's list
        File storage file = userFiles[msg.sender][fileIndex];
        
        // Ensure the caller is the owner of the file
        require(file.owner == msg.sender, "Only the owner can grant permission");

        // Grant permission to the specified user
        if (!file.permissions[user]) {
            file.permissionedAddresses.push(user); // Add to permissionedAddresses array
        }
        file.permissions[user] = true;
        emit PermissionGranted(msg.sender, file.hash, user);
    }

    /**
     * @dev Revoke permission from a user to view a specific file
     * @param fileIndex The index of the file in the user's list of files
     * @param user The address of the user to revoke permission from
     */
    function revokePermission(uint fileIndex, address user) public {
        // Ensure the file index is valid
        require(fileIndex < userFiles[msg.sender].length, "Invalid file index");
        
        // Get the file from the user's list
        File storage file = userFiles[msg.sender][fileIndex];
        
        // Ensure the caller is the owner of the file
        require(file.owner == msg.sender, "Only the owner can revoke permission");

        // Revoke permission from the specified user
        if (file.permissions[user]) {
            // Find and remove the user from the permissionedAddresses array
            for (uint i = 0; i < file.permissionedAddresses.length; i++) {
                if (file.permissionedAddresses[i] == user) {
                    file.permissionedAddresses[i] = file.permissionedAddresses[file.permissionedAddresses.length - 1];
                    file.permissionedAddresses.pop();
                    break;
                }
            }
        }
        file.permissions[user] = false;
        emit PermissionRevoked(msg.sender, file.hash, user);
    }

    /**
     * @dev Check if a user has permission to view a specific file
     * @param owner The address of the file owner
     * @param fileIndex The index of the file in the owner's list of files
     * @return bool indicating whether the caller has permission to view the file
     */
    function hasPermission(address owner, uint fileIndex) public view returns (bool) {
        // Ensure the file index is valid
        require(fileIndex < userFiles[owner].length, "Invalid file index");
        
        // Get the file from the owner's list
        File storage file = userFiles[owner][fileIndex];
        
        // Return true if the caller is the owner of the file or if they have been granted permission
        if (file.owner == msg.sender) {
            return true;
        }
        return file.permissions[msg.sender];
    }

    // Function to get all files uploaded by a user
    function getAllUserFiles(address _user) public view returns (FileInfo[] memory) {
        uint256 fileCount = userFiles[_user].length;

        // Create an array of FileInfo structs to store file information without the permissions mapping
        FileInfo[] memory files = new FileInfo[](fileCount);

        // Loop through all files uploaded by the user
        for (uint256 i = 0; i < fileCount; i++) {
            File storage userFile = userFiles[_user][i];
            files[i] = FileInfo(userFile.hash, userFile.owner, userFile.encryptedKey);
        }

        // Return the array of FileInfo structs
        return files;
    }

    /**
     * @dev Get all files that have been shared with a specific user
     * @param user The address of the user
     * @return sharedFiles An array of FileInfo structs containing the files that have been shared with the user
     */
    function getAllSharedFiles(address user) public view returns (FileInfo[] memory) {
        uint count = 0;

        // Count how many files the given user has permission to view
        for (uint i = 0; i < allUsers.length; i++) {
            address owner = allUsers[i];
            for (uint j = 0; j < userFiles[owner].length; j++) {
                File storage file = userFiles[owner][j];
                if (file.permissions[user]) {
                    count++;
                }
            }
        }

        // Create an array to store the file info for files the user can view
        FileInfo[] memory sharedFiles = new FileInfo[](count);
        uint index = 0;

        // Populate the sharedFiles array with files the user has permission to view
        for (uint i = 0; i < allUsers.length; i++) {
            address owner = allUsers[i];
            for (uint j = 0; j < userFiles[owner].length; j++) {
                File storage file = userFiles[owner][j];
                if (file.permissions[user]) {
                    sharedFiles[index] = FileInfo(file.hash, file.owner, file.encryptedKey);
                    index++;
                }
            }
        }

        return sharedFiles;
    }

    /**
     * @dev Get all users with whom the caller has shared files
     * @return sharedFileInfos An array of SharedFileInfo structs containing the files and the users they have been shared with
     */
    function getAllUsersWithSharedFiles() public view returns (SharedFileInfo[] memory) {
        uint count = 0;

        // Count how many shared file entries there are
        for (uint i = 0; i < userFiles[msg.sender].length; i++) {
            File storage file = userFiles[msg.sender][i];
            for (uint j = 0; j < file.permissionedAddresses.length; j++) {
                if (file.permissions[file.permissionedAddresses[j]]) {
                    count++;
                }
            }
        }

        // Create an array to store the shared file info
        SharedFileInfo[] memory sharedFileInfos = new SharedFileInfo[](count);
        uint k = 0;

        // Populate the sharedFileInfos array with shared file information
        for (uint i = 0; i < userFiles[msg.sender].length; i++) {
            File storage file = userFiles[msg.sender][i];
            for (uint j = 0; j < file.permissionedAddresses.length; j++) {
                if (file.permissions[file.permissionedAddresses[j]]) {
                    sharedFileInfos[k] = SharedFileInfo(
                        file.hash,
                        file.owner,
                        file.encryptedKey,
                        file.permissionedAddresses[j]
                    );
                    k++;
                }
            }
        }
        return sharedFileInfos;
    }
}
